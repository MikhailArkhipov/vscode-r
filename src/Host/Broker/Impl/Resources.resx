<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Critical_InvalidPipeHandle" xml:space="preserve">
    <value>Requested to write 'urls' to pipe '{0}', but it is not a valid pipe handle</value>
  </data>
  <data name="Critical_NoTlsCertificate" xml:space="preserve">
    <value>TLS certificate not found: {0}</value>
  </data>
  <data name="Critical_ParentProcessNotFound" xml:space="preserve">
    <value>Designated parent process {0} not found</value>
  </data>
  <data name="Critical_PingTimeOut" xml:space="preserve">
    <value>Ping timed out, terminating</value>
  </data>
  <data name="Critical_PipeConnectTimeOut" xml:space="preserve">
    <value>Requested to write 'urls' to pipe '{0}', but timed out while trying to connect to pipe</value>
  </data>
  <data name="Critical_TimeOutShutdown" xml:space="preserve">
    <value>Timed out waiting for graceful shutdown</value>
  </data>
  <data name="Default" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="Error_BlockedByProfileDeletion" xml:space="preserve">
    <value>User {0} session creation blocked due to pending profile deletion.</value>
  </data>
  <data name="Error_ConfigLoadFailed" xml:space="preserve">
    <value>Config file load failed: {0}</value>
  </data>
  <data name="Error_ConfigParseFailed" xml:space="preserve">
    <value>Config file parse failed: {0}</value>
  </data>
  <data name="Error_ConfiguredPortNotAvailable" xml:space="preserve">
    <value>Server port {0} is already in use.</value>
  </data>
  <data name="Error_ExitRHost" xml:space="preserve">
    <value>R Host exited with error : {0}</value>
  </data>
  <data name="Error_FailedRInstallationData" xml:space="preserve">
    <value>Failed to retrieve R installation data for interpreter \"{0}\" at \"{1}\"</value>
  </data>
  <data name="Error_NoRInterpreters" xml:space="preserve">
    <value>No compatible R interpreters found</value>
  </data>
  <data name="Error_RHostFailedToStart" xml:space="preserve">
    <value>R session process failed to start. Error: {0}</value>
  </data>
  <data name="Exception_PipeHasClientEnd" xml:space="preserve">
    <value>Pipe already has a client end</value>
  </data>
  <data name="Exception_PipeHasHostEnd" xml:space="preserve">
    <value>Pipe already has a host end</value>
  </data>
  <data name="Info_MonitoringParentProcess" xml:space="preserve">
    <value>Monitoring parent process {0}</value>
  </data>
  <data name="Info_ParentProcessExited" xml:space="preserve">
    <value>Parent process {0} exited, shutting down</value>
  </data>
  <data name="Info_StartingRHost" xml:space="preserve">
    <value>Starting R session {0} with command line: {1}</value>
  </data>
  <data name="Info_StartedRHost" xml:space="preserve">
    <value>R session {0} started</value>
  </data>
  <data name="Trace_AutoDetectingR" xml:space="preserve">
    <value>Auto-detecting R ...</value>
  </data>
  <data name="Trace_DetectedR" xml:space="preserve">
    <value>R {0} detected at \"{1}\"</value>
  </data>
  <data name="Trace_ErrorDataReceived" xml:space="preserve">
    <value>|{0}|: {1}</value>
  </data>
  <data name="Trace_ServerUrlsToPipeBegin" xml:space="preserve">
    <value>Writing 'urls' to pipe '{0}':{1}{2}</value>
  </data>
  <data name="Trace_ServerUrlsToPipeDone" xml:space="preserve">
    <value>Wrote 'urls' to pipe '{0}'</value>
  </data>
  <data name="Error_GracefulDisconnectFailed" xml:space="preserve">
    <value>Client failed to disconnect gracefully: {0}</value>
  </data>
  <data name="Error_ClientToHostConnectionFailed" xml:space="preserve">
    <value>Client disconnected from R session due to error: {0}</value>
  </data>
  <data name="Error_HostToClientConnectionFailed" xml:space="preserve">
    <value>R session disconnected from client due to error: {0}</value>
  </data>
  <data name="Debug_SessionNotFound" xml:space="preserve">
    <value>Could not find session</value>
  </data>
  <data name="Error_FailedToRun" xml:space="preserve">
    <value>Command "{0}" failed to run with error: {1}</value>
  </data>
  <data name="Trace_EnvironmentVariable" xml:space="preserve">
    <value>{0} = {1}</value>
  </data>
  <data name="Trace_EnvironmentVariableCreationBegin" xml:space="preserve">
    <value>Creating user environment variables for user {0} with profile directory {1}</value>
  </data>
  <data name="Trace_EnvironmentVariable1" xml:space="preserve">
    <value>{0} = {1}</value>
  </data>
  <data name="Trace_EnvironmentVariableCreationBegin1" xml:space="preserve">
    <value>Creating user environment variables for user {0} with profile directory {1}</value>
  </data>
</root>